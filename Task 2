import random

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Function to check if the game is over
def is_game_over(board):
    for row in board:
        if row.count("X") == 3 or row.count("O") == 3:
            return True
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return True
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return True
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return True
    return False

# Function to evaluate the board
def evaluate(board):
    for row in board:
        if row.count("X") == 3:
            return 1
        elif row.count("O") == 3:
            return -1
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] == "X":
            return 1
        elif board[0][col] == board[1][col] == board[2][col] and board[0][col] == "O":
            return -1
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] == "X":
        return 1
    elif board[0][0] == board[1][1] == board[2][2] and board[0][0] == "O":
        return -1
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] == "X":
        return 1
    elif board[0][2] == board[1][1] == board[2][0] and board[0][2] == "O":
        return -1
    return 0

# Minimax algorithm
def minimax(board, depth, is_max):
    if is_game_over(board):
        return evaluate(board)
    
    if is_max:
        max_eval = float("-inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, not is_max)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, not is_max)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
        return min_eval

# Function to find the best move
def find_best_move(board):
    best_eval = float("-inf")
    best_move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "X"
                move_eval = minimax(board, 0, False)
                board[i][j] = " "
                if move_eval > best_eval:
                    best_eval = move_eval
                    best_move = (i, j)
    
    return best_move

# Main game loop
if __name__ == "__main__":
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    
    while True:
        player_row, player_col = map(int, input("Enter your move (row and column): ").split())
        if board[player_row][player_col] == " ":
            board[player_row][player_col] = "O"
        else:
            print("Invalid move. Try again.")
            continue
        
        print_board(board)
        
        if is_game_over(board):
            print("You win!")
            break
        
        best_move = find_best_move(board)
        board[best_move[0]][best_move[1]] = "X"
        print("AI's move:")
        print_board(board)
        
        if is_game_over(board):
            print("AI wins!")
            brea
